{"ast":null,"code":"var _jsxFileName = \"/Users/abbylui/Documents/GitHub/aboutme/idleUI/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/about\",\n            element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nfunction Home() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Your Three.js setup code here\n    const vertexShader = `\n      uniform vec3 lightPosition;\n      varying float vDist;\n  \n      void main() {\n          vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n  \n          // Calculate the distance from the light source to the vertex\n          float dist = distance(lightPosition, transformedPosition);\n          vDist = dist;\n  \n          // Apply a warp based on distance\n          vec3 direction = normalize(lightPosition - transformedPosition);\n          vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.3; // Warp effect\n          transformedPosition += offset;\n  \n          gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n      }\n    `;\n    const fragmentShader = `\n      varying float vDist;\n      uniform vec3 lightColor;\n  \n      void main() {\n          float intensity = 1.0 / (vDist * vDist + 0.1);\n          intensity = intensity * 40.0;\n          intensity = clamp(intensity, 0.0, 1.0);\n  \n          vec3 color = lightColor * intensity;\n  \n          gl_FragColor = vec4(color, 1.0);\n      }\n    `;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n    const pointLight = new THREE.PointLight(0xffffff, 2, 100);\n    pointLight.decay = 1;\n    pointLight.castShadow = false;\n    scene.add(pointLight);\n    const uniforms = {\n      lightPosition: {\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        value: new THREE.Color(0xffffff)\n      }\n    };\n    const loader = new FontLoader();\n    loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n      const textGeometry = new TextGeometry('HCI Explorer of digital-physical experiences', {\n        font: font,\n        size: 0.2,\n        height: 0.0,\n        curveSegments: 12,\n        bevelEnabled: false\n      });\n      textGeometry.computeBoundingBox();\n      const textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n      const xPosition = -textWidth / 2;\n      const textMaterial = new THREE.ShaderMaterial({\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader,\n        uniforms: uniforms\n      });\n      const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      textMesh.position.set(xPosition, 2.5, 0);\n      textMesh.castShadow = false;\n      scene.add(textMesh);\n    });\n    camera.position.z = 5;\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      renderer.setPixelRatio(window.devicePixelRatio / 2);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n    let mouseX = 0;\n    let mouseY = 0;\n    const onMouseMove = event => {\n      mouseX = event.clientX / window.innerWidth * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n    document.addEventListener('mousemove', onMouseMove);\n    function animate() {\n      requestAnimationFrame(animate);\n      const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      pos.z += 1;\n      pointLight.position.copy(pos);\n      uniforms.lightPosition.value.copy(pos);\n      renderer.render(scene, camera);\n    }\n    animate();\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100vw',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 10\n  }, this);\n}\n\n// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\n// import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\n// import Navbar from './components/Navbar';\n// import './App.css';\n\n// function App() {\n//   const mountRef = useRef(null);\n\n//   useEffect(() => {\n//     // Vertex Shader\n//     const vertexShader = `\n//       uniform vec3 lightPosition;\n//       varying float vDist;\n\n//       void main() {\n//           vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n\n//           // Calculate the distance from the light source to the vertex\n//           float dist = distance(lightPosition, transformedPosition);\n//           vDist = dist;\n\n//           // Apply a warp based on distance\n//           vec3 direction = normalize(lightPosition - transformedPosition);\n//           vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.2; // Warp effect\n//           transformedPosition += offset;\n\n//           gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n//       }\n//     `;\n\n//     // Fragment Shader for Text and Rectangle\n//     const fragmentShader = `\n//       varying float vDist;\n//       uniform vec3 lightColor; // Uniform to receive light color\n//       uniform vec3 baseColor; // Uniform to set the base color (text or rectangle)\n\n//       void main() {\n//           // Calculate intensity based on distance\n//           float intensity = 1.0 / (vDist * vDist + 0.1);\n//           intensity = intensity * 30.0;\n//           intensity = clamp(intensity, 0.0, 1.0);\n\n//           // Apply the light color and intensity to the output color\n//           vec3 color = mix(baseColor, lightColor * intensity, 0.5); // Mix base color with light\n\n//           gl_FragColor = vec4(color, 1.0); // Use the calculated color for the fragment\n//       }\n//     `;\n\n//     // Scene, Camera, Renderer\n//     const scene = new THREE.Scene();\n//     const camera = new THREE.PerspectiveCamera(\n//       75,\n//       window.innerWidth / window.innerHeight,\n//       0.1,\n//       1000\n//     );\n//     const renderer = new THREE.WebGLRenderer({ antialias: true });\n\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     mountRef.current.appendChild(renderer.domElement);\n\n//     // Add a point light to act as the dynamic light source\n//     const pointLight = new THREE.PointLight(0xffffff, 2, 100); // White light with increased intensity\n//     pointLight.decay = 1; // Adjust decay for desired falloff\n//     pointLight.castShadow = true;\n//     scene.add(pointLight);\n\n//     // Uniforms for the shader\n//     const uniforms = {\n//       lightPosition: { value: new THREE.Vector3(0, 0, 0) },\n//       lightColor: { value: new THREE.Color(0xffffff) }, // Set light color for interactions\n//     };\n\n//     // Load the font and create the text\n//     const loader = new FontLoader();\n//     loader.load(\n//       'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n//       function (font) {\n//         const textGeometry = new TextGeometry(\n//           'HCI Explorer of digital-physical experiences',\n//           {\n//             font: font,\n//             size: 0.2,\n//             height: 0.0,\n//             curveSegments: 12,\n//             bevelEnabled: false,\n//           }\n//         );\n\n//         textGeometry.computeBoundingBox();\n//         const textWidth =\n//           textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n//         const textHeight =\n//           textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y;\n//         const xPosition = -textWidth / 2;\n//         const yPosition = 2.5; // Keep the original vertical position of the text\n\n//         // Create the group for text and background\n//         const textGroup = new THREE.Group();\n\n//         // Create the background rectangle\n//         const backgroundGeometry = new THREE.PlaneGeometry(\n//           textWidth + 0.2, // Slightly larger than the text\n//           textHeight + 0.1\n//         );\n\n//         // Background material using the same shader but with a blue base color\n//         const backgroundMaterial = new THREE.ShaderMaterial({\n//           vertexShader: vertexShader,\n//           fragmentShader: fragmentShader,\n//           uniforms: {\n//             ...uniforms,\n//             baseColor: { value: new THREE.Color(0x000000) }, // Blue base color for the rectangle\n//           },\n//         });\n\n//         const backgroundMesh = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n//         backgroundMesh.position.set(2.7, 0.1, -0.01); // Adjust the rectangle's position slightly below the text\n\n//         // Text material using the same shader but with a white base color\n//         const textMaterial = new THREE.ShaderMaterial({\n//           vertexShader: vertexShader,\n//           fragmentShader: fragmentShader,\n//           uniforms: {\n//             ...uniforms,\n//             baseColor: { value: new THREE.Color(0xffffff) }, // White base color for the text\n//           },\n//         });\n\n//         const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n//         textMesh.position.set(0, 0, 0); // Positioned at origin of the group\n\n//         // Add both the text and background to the group\n//         textGroup.add(backgroundMesh);\n//         textGroup.add(textMesh);\n//         textGroup.position.set(xPosition, yPosition, 0); // Adjust the group's overall position\n\n//         // Add the group to the scene\n//         scene.add(textGroup);\n//       }\n//     );\n\n//     // Camera Position\n//     camera.position.z = 5;\n\n//     // Handle window resize\n//     const handleResize = () => {\n//       const width = window.innerWidth;\n//       const height = window.innerHeight;\n//       renderer.setSize(width, height);\n//       camera.aspect = width / height;\n//       camera.updateProjectionMatrix();\n//     };\n//     window.addEventListener('resize', handleResize);\n\n//     // Animate light following the mouse\n//     let mouseX = 0;\n//     let mouseY = 0;\n\n//     const onMouseMove = (event) => {\n//       mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n//       mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n//     };\n\n//     document.addEventListener('mousemove', onMouseMove);\n\n//     function animate() {\n//       requestAnimationFrame(animate);\n\n//       // Convert the mouse position to 3D coordinates\n//       const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n//       vector.unproject(camera);\n//       const dir = vector.sub(camera.position).normalize();\n//       const distance = -camera.position.z / dir.z;\n\n//       // Position the light slightly in front of the text\n//       const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n//       pos.z += 1; // Keep the light in front of the text\n//       pointLight.position.copy(pos);\n\n//       // Update the light position uniform for the shader\n//       uniforms.lightPosition.value.copy(pos);\n\n//       renderer.render(scene, camera);\n//     }\n\n//     animate();\n\n//     return () => {\n//       // Clean up event listeners and Three.js resources on component unmount\n//       document.removeEventListener('mousemove', onMouseMove);\n//       window.removeEventListener('resize', handleResize);\n//       mountRef.current.removeChild(renderer.domElement);\n//       renderer.dispose();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div ref={mountRef} style={{ width: '100vw', height: '100vh' }} />\n//     </div>\n//   );\n// }\n\n// export default App;\n_s(Home, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c2 = Home;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","FontLoader","TextGeometry","BrowserRouter","Router","Route","Routes","Navbar","About","jsxDEV","_jsxDEV","App","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","Home","_c","_s","mountRef","vertexShader","fragmentShader","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","pointLight","PointLight","decay","castShadow","add","uniforms","lightPosition","value","Vector3","lightColor","Color","loader","load","font","textGeometry","size","height","curveSegments","bevelEnabled","computeBoundingBox","textWidth","boundingBox","max","x","min","xPosition","textMaterial","ShaderMaterial","textMesh","Mesh","position","set","z","handleResize","width","setPixelRatio","devicePixelRatio","aspect","updateProjectionMatrix","addEventListener","mouseX","mouseY","onMouseMove","event","clientX","clientY","document","animate","requestAnimationFrame","vector","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","copy","render","removeEventListener","removeChild","dispose","ref","style","_c2","$RefreshReg$"],"sources":["/Users/abbylui/Documents/GitHub/aboutme/idleUI/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div>\n      <Router>\n        <div>\n          <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<Home />} /> {/* Home page will show projects */}\n            <Route path=\"/about\" element={<About />} />\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction Home() {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    // Your Three.js setup code here\n    const vertexShader = `\n      uniform vec3 lightPosition;\n      varying float vDist;\n  \n      void main() {\n          vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n  \n          // Calculate the distance from the light source to the vertex\n          float dist = distance(lightPosition, transformedPosition);\n          vDist = dist;\n  \n          // Apply a warp based on distance\n          vec3 direction = normalize(lightPosition - transformedPosition);\n          vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.3; // Warp effect\n          transformedPosition += offset;\n  \n          gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n      }\n    `;\n\n    const fragmentShader = `\n      varying float vDist;\n      uniform vec3 lightColor;\n  \n      void main() {\n          float intensity = 1.0 / (vDist * vDist + 0.1);\n          intensity = intensity * 40.0;\n          intensity = clamp(intensity, 0.0, 1.0);\n  \n          vec3 color = lightColor * intensity;\n  \n          gl_FragColor = vec4(color, 1.0);\n      }\n    `;\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    const pointLight = new THREE.PointLight(0xffffff, 2, 100);\n    pointLight.decay = 1;\n    pointLight.castShadow = false;\n    scene.add(pointLight);\n\n    const uniforms = {\n      lightPosition: { value: new THREE.Vector3(0, 0, 0) },\n      lightColor: { value: new THREE.Color(0xffffff) },\n    };\n\n    const loader = new FontLoader();\n    loader.load(\n      'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n      function (font) {\n        const textGeometry = new TextGeometry('HCI Explorer of digital-physical experiences', {\n          font: font,\n          size: 0.2,\n          height: 0.0,\n          curveSegments: 12,\n          bevelEnabled: false,\n        });\n\n        textGeometry.computeBoundingBox();\n        const textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n        const xPosition = -textWidth / 2;\n\n        const textMaterial = new THREE.ShaderMaterial({\n          vertexShader: vertexShader,\n          fragmentShader: fragmentShader,\n          uniforms: uniforms,\n        });\n\n        const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n        textMesh.position.set(xPosition, 2.5, 0);\n        textMesh.castShadow = false;\n        scene.add(textMesh);\n      }\n    );\n\n    camera.position.z = 5;\n\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      renderer.setPixelRatio(window.devicePixelRatio / 2);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n\n    let mouseX = 0;\n    let mouseY = 0;\n\n    const onMouseMove = (event) => {\n      mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      pos.z += 1;\n      pointLight.position.copy(pos);\n\n      uniforms.lightPosition.value.copy(pos);\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    return () => {\n      document.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n\n  return <div ref={mountRef} style={{ width: '100vw', height: '100vh' }} />;\n}\n\n\n// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\n// import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\n// import Navbar from './components/Navbar';\n// import './App.css';\n\n// function App() {\n//   const mountRef = useRef(null);\n\n//   useEffect(() => {\n//     // Vertex Shader\n//     const vertexShader = `\n//       uniform vec3 lightPosition;\n//       varying float vDist;\n\n//       void main() {\n//           vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n\n//           // Calculate the distance from the light source to the vertex\n//           float dist = distance(lightPosition, transformedPosition);\n//           vDist = dist;\n\n//           // Apply a warp based on distance\n//           vec3 direction = normalize(lightPosition - transformedPosition);\n//           vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.2; // Warp effect\n//           transformedPosition += offset;\n\n//           gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n//       }\n//     `;\n\n//     // Fragment Shader for Text and Rectangle\n//     const fragmentShader = `\n//       varying float vDist;\n//       uniform vec3 lightColor; // Uniform to receive light color\n//       uniform vec3 baseColor; // Uniform to set the base color (text or rectangle)\n\n//       void main() {\n//           // Calculate intensity based on distance\n//           float intensity = 1.0 / (vDist * vDist + 0.1);\n//           intensity = intensity * 30.0;\n//           intensity = clamp(intensity, 0.0, 1.0);\n\n//           // Apply the light color and intensity to the output color\n//           vec3 color = mix(baseColor, lightColor * intensity, 0.5); // Mix base color with light\n\n//           gl_FragColor = vec4(color, 1.0); // Use the calculated color for the fragment\n//       }\n//     `;\n\n//     // Scene, Camera, Renderer\n//     const scene = new THREE.Scene();\n//     const camera = new THREE.PerspectiveCamera(\n//       75,\n//       window.innerWidth / window.innerHeight,\n//       0.1,\n//       1000\n//     );\n//     const renderer = new THREE.WebGLRenderer({ antialias: true });\n\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     mountRef.current.appendChild(renderer.domElement);\n\n//     // Add a point light to act as the dynamic light source\n//     const pointLight = new THREE.PointLight(0xffffff, 2, 100); // White light with increased intensity\n//     pointLight.decay = 1; // Adjust decay for desired falloff\n//     pointLight.castShadow = true;\n//     scene.add(pointLight);\n\n//     // Uniforms for the shader\n//     const uniforms = {\n//       lightPosition: { value: new THREE.Vector3(0, 0, 0) },\n//       lightColor: { value: new THREE.Color(0xffffff) }, // Set light color for interactions\n//     };\n\n//     // Load the font and create the text\n//     const loader = new FontLoader();\n//     loader.load(\n//       'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n//       function (font) {\n//         const textGeometry = new TextGeometry(\n//           'HCI Explorer of digital-physical experiences',\n//           {\n//             font: font,\n//             size: 0.2,\n//             height: 0.0,\n//             curveSegments: 12,\n//             bevelEnabled: false,\n//           }\n//         );\n\n//         textGeometry.computeBoundingBox();\n//         const textWidth =\n//           textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n//         const textHeight =\n//           textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y;\n//         const xPosition = -textWidth / 2;\n//         const yPosition = 2.5; // Keep the original vertical position of the text\n\n//         // Create the group for text and background\n//         const textGroup = new THREE.Group();\n\n//         // Create the background rectangle\n//         const backgroundGeometry = new THREE.PlaneGeometry(\n//           textWidth + 0.2, // Slightly larger than the text\n//           textHeight + 0.1\n//         );\n\n//         // Background material using the same shader but with a blue base color\n//         const backgroundMaterial = new THREE.ShaderMaterial({\n//           vertexShader: vertexShader,\n//           fragmentShader: fragmentShader,\n//           uniforms: {\n//             ...uniforms,\n//             baseColor: { value: new THREE.Color(0x000000) }, // Blue base color for the rectangle\n//           },\n//         });\n\n//         const backgroundMesh = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n//         backgroundMesh.position.set(2.7, 0.1, -0.01); // Adjust the rectangle's position slightly below the text\n\n//         // Text material using the same shader but with a white base color\n//         const textMaterial = new THREE.ShaderMaterial({\n//           vertexShader: vertexShader,\n//           fragmentShader: fragmentShader,\n//           uniforms: {\n//             ...uniforms,\n//             baseColor: { value: new THREE.Color(0xffffff) }, // White base color for the text\n//           },\n//         });\n\n//         const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n//         textMesh.position.set(0, 0, 0); // Positioned at origin of the group\n\n//         // Add both the text and background to the group\n//         textGroup.add(backgroundMesh);\n//         textGroup.add(textMesh);\n//         textGroup.position.set(xPosition, yPosition, 0); // Adjust the group's overall position\n\n//         // Add the group to the scene\n//         scene.add(textGroup);\n//       }\n//     );\n\n//     // Camera Position\n//     camera.position.z = 5;\n\n//     // Handle window resize\n//     const handleResize = () => {\n//       const width = window.innerWidth;\n//       const height = window.innerHeight;\n//       renderer.setSize(width, height);\n//       camera.aspect = width / height;\n//       camera.updateProjectionMatrix();\n//     };\n//     window.addEventListener('resize', handleResize);\n\n//     // Animate light following the mouse\n//     let mouseX = 0;\n//     let mouseY = 0;\n\n//     const onMouseMove = (event) => {\n//       mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n//       mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n//     };\n\n//     document.addEventListener('mousemove', onMouseMove);\n\n//     function animate() {\n//       requestAnimationFrame(animate);\n\n//       // Convert the mouse position to 3D coordinates\n//       const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n//       vector.unproject(camera);\n//       const dir = vector.sub(camera.position).normalize();\n//       const distance = -camera.position.z / dir.z;\n\n//       // Position the light slightly in front of the text\n//       const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n//       pos.z += 1; // Keep the light in front of the text\n//       pointLight.position.copy(pos);\n\n//       // Update the light position uniform for the shader\n//       uniforms.lightPosition.value.copy(pos);\n\n//       renderer.render(scene, camera);\n//     }\n\n//     animate();\n\n//     return () => {\n//       // Clean up event listeners and Three.js resources on component unmount\n//       document.removeEventListener('mousemove', onMouseMove);\n//       window.removeEventListener('resize', handleResize);\n//       mountRef.current.removeChild(renderer.domElement);\n//       renderer.dispose();\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div ref={mountRef} style={{ width: '100vw', height: '100vh' }} />\n//     </div>\n//   );\n// }\n\n// export default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,0CAA0C;AACrE,SAASC,YAAY,QAAQ,+CAA+C;AAC5E,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAEb,oBACED,OAAA;IAAAE,QAAA,eACEF,OAAA,CAACN,MAAM;MAAAQ,QAAA,eACLF,OAAA;QAAAE,QAAA,gBACEF,OAAA,CAACH,MAAM;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVN,OAAA,CAACJ,MAAM;UAAAM,QAAA,gBACLF,OAAA,CAACL,KAAK;YAACY,IAAI,EAAC,GAAG;YAACC,OAAO,eAAER,OAAA,CAACS,IAAI;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC,eACtCN,OAAA,CAACL,KAAK;YAACY,IAAI,EAAC,QAAQ;YAACC,OAAO,eAAER,OAAA,CAACF,KAAK;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACI,EAAA,GAfQT,GAAG;AAiBZ,eAAeA,GAAG;AAElB,SAASQ,IAAIA,CAAA,EAAG;EAAAE,EAAA;EACd,MAAMC,QAAQ,GAAGvB,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,YAAY,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMC,cAAc,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,MAAMC,KAAK,GAAG,IAAIzB,KAAK,CAAC0B,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAI3B,KAAK,CAAC4B,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjG,MAAMC,QAAQ,GAAG,IAAIhC,KAAK,CAACiC,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAE7DF,QAAQ,CAACG,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDT,QAAQ,CAACc,OAAO,CAACC,WAAW,CAACL,QAAQ,CAACM,UAAU,CAAC;IAEjD,MAAMC,UAAU,GAAG,IAAIvC,KAAK,CAACwC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC;IACzDD,UAAU,CAACE,KAAK,GAAG,CAAC;IACpBF,UAAU,CAACG,UAAU,GAAG,KAAK;IAC7BjB,KAAK,CAACkB,GAAG,CAACJ,UAAU,CAAC;IAErB,MAAMK,QAAQ,GAAG;MACfC,aAAa,EAAE;QAAEC,KAAK,EAAE,IAAI9C,KAAK,CAAC+C,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MAAE,CAAC;MACpDC,UAAU,EAAE;QAAEF,KAAK,EAAE,IAAI9C,KAAK,CAACiD,KAAK,CAAC,QAAQ;MAAE;IACjD,CAAC;IAED,MAAMC,MAAM,GAAG,IAAIjD,UAAU,CAAC,CAAC;IAC/BiD,MAAM,CAACC,IAAI,CACT,qEAAqE,EACrE,UAAUC,IAAI,EAAE;MACd,MAAMC,YAAY,GAAG,IAAInD,YAAY,CAAC,8CAA8C,EAAE;QACpFkD,IAAI,EAAEA,IAAI;QACVE,IAAI,EAAE,GAAG;QACTC,MAAM,EAAE,GAAG;QACXC,aAAa,EAAE,EAAE;QACjBC,YAAY,EAAE;MAChB,CAAC,CAAC;MAEFJ,YAAY,CAACK,kBAAkB,CAAC,CAAC;MACjC,MAAMC,SAAS,GAAGN,YAAY,CAACO,WAAW,CAACC,GAAG,CAACC,CAAC,GAAGT,YAAY,CAACO,WAAW,CAACG,GAAG,CAACD,CAAC;MACjF,MAAME,SAAS,GAAG,CAACL,SAAS,GAAG,CAAC;MAEhC,MAAMM,YAAY,GAAG,IAAIjE,KAAK,CAACkE,cAAc,CAAC;QAC5C3C,YAAY,EAAEA,YAAY;QAC1BC,cAAc,EAAEA,cAAc;QAC9BoB,QAAQ,EAAEA;MACZ,CAAC,CAAC;MAEF,MAAMuB,QAAQ,GAAG,IAAInE,KAAK,CAACoE,IAAI,CAACf,YAAY,EAAEY,YAAY,CAAC;MAC3DE,QAAQ,CAACE,QAAQ,CAACC,GAAG,CAACN,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;MACxCG,QAAQ,CAACzB,UAAU,GAAG,KAAK;MAC3BjB,KAAK,CAACkB,GAAG,CAACwB,QAAQ,CAAC;IACrB,CACF,CAAC;IAEDxC,MAAM,CAAC0C,QAAQ,CAACE,CAAC,GAAG,CAAC;IAErB,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMC,KAAK,GAAG5C,MAAM,CAACC,UAAU;MAC/B,MAAMyB,MAAM,GAAG1B,MAAM,CAACE,WAAW;MACjCC,QAAQ,CAACG,OAAO,CAACsC,KAAK,EAAElB,MAAM,CAAC;MAC/BvB,QAAQ,CAAC0C,aAAa,CAAC7C,MAAM,CAAC8C,gBAAgB,GAAG,CAAC,CAAC;MACnDhD,MAAM,CAACiD,MAAM,GAAGH,KAAK,GAAGlB,MAAM;MAC9B5B,MAAM,CAACkD,sBAAsB,CAAC,CAAC;IACjC,CAAC;IACDhD,MAAM,CAACiD,gBAAgB,CAAC,QAAQ,EAAEN,YAAY,CAAC;IAE/C,IAAIO,MAAM,GAAG,CAAC;IACd,IAAIC,MAAM,GAAG,CAAC;IAEd,MAAMC,WAAW,GAAIC,KAAK,IAAK;MAC7BH,MAAM,GAAIG,KAAK,CAACC,OAAO,GAAGtD,MAAM,CAACC,UAAU,GAAI,CAAC,GAAG,CAAC;MACpDkD,MAAM,GAAG,EAAEE,KAAK,CAACE,OAAO,GAAGvD,MAAM,CAACE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;IACxD,CAAC;IAEDsD,QAAQ,CAACP,gBAAgB,CAAC,WAAW,EAAEG,WAAW,CAAC;IAEnD,SAASK,OAAOA,CAAA,EAAG;MACjBC,qBAAqB,CAACD,OAAO,CAAC;MAE9B,MAAME,MAAM,GAAG,IAAIxF,KAAK,CAAC+C,OAAO,CAACgC,MAAM,EAAEC,MAAM,EAAE,GAAG,CAAC;MACrDQ,MAAM,CAACC,SAAS,CAAC9D,MAAM,CAAC;MACxB,MAAM+D,GAAG,GAAGF,MAAM,CAACG,GAAG,CAAChE,MAAM,CAAC0C,QAAQ,CAAC,CAACuB,SAAS,CAAC,CAAC;MACnD,MAAMC,QAAQ,GAAG,CAAClE,MAAM,CAAC0C,QAAQ,CAACE,CAAC,GAAGmB,GAAG,CAACnB,CAAC;MAE3C,MAAMuB,GAAG,GAAGnE,MAAM,CAAC0C,QAAQ,CAAC0B,KAAK,CAAC,CAAC,CAACpD,GAAG,CAAC+C,GAAG,CAACM,cAAc,CAACH,QAAQ,CAAC,CAAC;MACrEC,GAAG,CAACvB,CAAC,IAAI,CAAC;MACVhC,UAAU,CAAC8B,QAAQ,CAAC4B,IAAI,CAACH,GAAG,CAAC;MAE7BlD,QAAQ,CAACC,aAAa,CAACC,KAAK,CAACmD,IAAI,CAACH,GAAG,CAAC;MAEtC9D,QAAQ,CAACkE,MAAM,CAACzE,KAAK,EAAEE,MAAM,CAAC;IAChC;IAEA2D,OAAO,CAAC,CAAC;IAET,OAAO,MAAM;MACXD,QAAQ,CAACc,mBAAmB,CAAC,WAAW,EAAElB,WAAW,CAAC;MACtDpD,MAAM,CAACsE,mBAAmB,CAAC,QAAQ,EAAE3B,YAAY,CAAC;MAClDlD,QAAQ,CAACc,OAAO,CAACgE,WAAW,CAACpE,QAAQ,CAACM,UAAU,CAAC;MACjDN,QAAQ,CAACqE,OAAO,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO3F,OAAA;IAAK4F,GAAG,EAAEhF,QAAS;IAACiF,KAAK,EAAE;MAAE9B,KAAK,EAAE,OAAO;MAAElB,MAAM,EAAE;IAAQ;EAAE;IAAA1C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3E;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAK,EAAA,CA3VSF,IAAI;AAAAqF,GAAA,GAAJrF,IAAI;AAAA,IAAAC,EAAA,EAAAoF,GAAA;AAAAC,YAAA,CAAArF,EAAA;AAAAqF,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}