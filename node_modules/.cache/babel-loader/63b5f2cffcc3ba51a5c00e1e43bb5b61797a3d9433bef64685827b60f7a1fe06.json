{"ast":null,"code":"var _jsxFileName = \"/Users/abbylui/Documents/GitHub/aboutme/idleUI/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Vertex Shader\n    const vertexShader = `\n            uniform vec3 lightPosition;\n            varying float vDist;\n        \n            void main() {\n                vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n        \n                // Calculate the distance from the light source to the vertex\n                float dist = distance(lightPosition, transformedPosition);\n                vDist = dist;\n        \n                // Apply a warp based on distance\n                vec3 direction = normalize(lightPosition - transformedPosition);\n                vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.2; // Warp effect\n                transformedPosition += offset;\n        \n                gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n            }\n        `;\n\n    // Fragment Shader\n    const fragmentShader = `\n            varying float vDist;\n            uniform vec3 lightColor; // Uniform to receive light color\n        \n            void main() {\n                // Calculate intensity based on distance\n                float intensity = 1.0 / (vDist * vDist + 0.1);\n                intensity = intensity * 40.0;\n                intensity = clamp(intensity, 0.0, 1.0);\n        \n                // Apply the light color and intensity to the output color\n                vec3 color = lightColor * intensity; // Multiply the light color by the intensity\n        \n                gl_FragColor = vec4(color, 1.0); // Use the calculated color for the fragment\n            }\n        `;\n\n    // Scene, Camera, Renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add a point light to act as the dynamic light source\n    const pointLight = new THREE.PointLight(0xff0000, 2, 100); // Red light with increased intensity\n    pointLight.decay = 1; // Adjust decay for desired falloff\n    pointLight.castShadow = true;\n    scene.add(pointLight);\n\n    // Uniforms for the shader\n    const uniforms = {\n      lightPosition: {\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        value: new THREE.Color(0xff0000)\n      } // Set light color\n    };\n\n    // Load the font and create the text\n    const loader = new THREE.FontLoader();\n    loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n      const textGeometry = new THREE.TextGeometry('HCI Explorer of digital-physical experiences', {\n        font: font,\n        size: 0.2,\n        height: 0,\n        curveSegments: 12,\n        bevelEnabled: false\n      });\n      const textMaterial = new THREE.ShaderMaterial({\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader,\n        uniforms: uniforms\n      });\n      textGeometry.computeBoundingBox();\n      const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      const textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n      const xPosition = -textWidth / 2;\n      textMesh.position.set(xPosition, 2.5, 0);\n      textMesh.castShadow = true;\n      scene.add(textMesh);\n    });\n\n    // Camera Position\n    camera.position.z = 5;\n\n    // Animate light following the mouse\n    let mouseX = 0;\n    let mouseY = 0;\n    function onMouseMove(event) {\n      mouseX = event.clientX / window.innerWidth * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n    document.addEventListener('mousemove', onMouseMove);\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Convert the mouse position to 3D coordinates\n      const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n\n      // Position the light slightly in front of the text\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      pos.z += 1; // Keep the light in front of the text\n      pointLight.position.copy(pos);\n\n      // Update the light position uniform for the shader\n      uniforms.lightPosition.value.copy(pos);\n      renderer.render(scene, camera);\n    }\n    animate();\n    return () => {\n      // Clean up event listener and Three.js resources on component unmount\n      document.removeEventListener('mousemove', onMouseMove);\n      mountRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100vw',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","App","_s","mountRef","vertexShader","fragmentShader","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","pointLight","PointLight","decay","castShadow","add","uniforms","lightPosition","value","Vector3","lightColor","Color","loader","FontLoader","load","font","textGeometry","TextGeometry","size","height","curveSegments","bevelEnabled","textMaterial","ShaderMaterial","computeBoundingBox","textMesh","Mesh","textWidth","boundingBox","max","x","min","xPosition","position","set","z","mouseX","mouseY","onMouseMove","event","clientX","clientY","document","addEventListener","animate","requestAnimationFrame","vector","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","copy","render","removeEventListener","removeChild","dispose","ref","style","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abbylui/Documents/GitHub/aboutme/idleUI/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nfunction App() {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    // Vertex Shader\n    const vertexShader = `\n            uniform vec3 lightPosition;\n            varying float vDist;\n        \n            void main() {\n                vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n        \n                // Calculate the distance from the light source to the vertex\n                float dist = distance(lightPosition, transformedPosition);\n                vDist = dist;\n        \n                // Apply a warp based on distance\n                vec3 direction = normalize(lightPosition - transformedPosition);\n                vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.2; // Warp effect\n                transformedPosition += offset;\n        \n                gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n            }\n        `;\n\n    // Fragment Shader\n    const fragmentShader = `\n            varying float vDist;\n            uniform vec3 lightColor; // Uniform to receive light color\n        \n            void main() {\n                // Calculate intensity based on distance\n                float intensity = 1.0 / (vDist * vDist + 0.1);\n                intensity = intensity * 40.0;\n                intensity = clamp(intensity, 0.0, 1.0);\n        \n                // Apply the light color and intensity to the output color\n                vec3 color = lightColor * intensity; // Multiply the light color by the intensity\n        \n                gl_FragColor = vec4(color, 1.0); // Use the calculated color for the fragment\n            }\n        `;\n\n    // Scene, Camera, Renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add a point light to act as the dynamic light source\n    const pointLight = new THREE.PointLight(0xff0000, 2, 100); // Red light with increased intensity\n    pointLight.decay = 1; // Adjust decay for desired falloff\n    pointLight.castShadow = true;\n    scene.add(pointLight);\n\n    // Uniforms for the shader\n    const uniforms = {\n      lightPosition: { value: new THREE.Vector3(0, 0, 0) },\n      lightColor: { value: new THREE.Color(0xff0000) } // Set light color\n    };\n\n    // Load the font and create the text\n    const loader = new THREE.FontLoader();\n    loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n      const textGeometry = new THREE.TextGeometry('HCI Explorer of digital-physical experiences', {\n        font: font,\n        size: 0.2,\n        height: 0,\n        curveSegments: 12,\n        bevelEnabled: false,\n      });\n\n      const textMaterial = new THREE.ShaderMaterial({\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader,\n        uniforms: uniforms,\n      });\n      textGeometry.computeBoundingBox();\n      const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      const textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n      const xPosition = -textWidth / 2;\n      textMesh.position.set(xPosition, 2.5, 0);\n      textMesh.castShadow = true;\n      scene.add(textMesh);\n    });\n\n    // Camera Position\n    camera.position.z = 5;\n\n    // Animate light following the mouse\n    let mouseX = 0;\n    let mouseY = 0;\n\n    function onMouseMove(event) {\n      mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Convert the mouse position to 3D coordinates\n      const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n\n      // Position the light slightly in front of the text\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      pos.z += 1; // Keep the light in front of the text\n      pointLight.position.copy(pos);\n\n      // Update the light position uniform for the shader\n      uniforms.lightPosition.value.copy(pos);\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    return () => {\n      // Clean up event listener and Three.js resources on component unmount\n      document.removeEventListener('mousemove', onMouseMove);\n      mountRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n\n  return <div ref={mountRef} style={{ width: '100vw', height: '100vh' }} />;\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}