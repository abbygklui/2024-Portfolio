{"ast":null,"code":"var _jsxFileName = \"/Users/abbylui/Documents/GitHub/idleUI/src/components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = ({\n  forecast\n}) => {\n  _s();\n  const [visibleItems, setVisibleItems] = useState(forecast.length);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const handleResize = () => {\n      if (containerRef.current) {\n        const containerWidth = containerRef.current.offsetWidth;\n        const itemWidth = 80; // Assume each item takes approximately 80px width including margins\n        const itemsToShow = Math.floor(containerWidth / itemWidth);\n        setVisibleItems(Math.min(itemsToShow, forecast.length));\n      }\n    };\n    handleResize(); // Initial check\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [forecast.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-container\",\n    ref: containerRef,\n    children: forecast.slice(0, visibleItems).map((hour, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-hour\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: hour.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: hour.icon,\n        alt: \"weather icon\",\n        className: \"weather-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [hour.temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(Weather, \"662mIs9I9sf/asom5wGqRf8R1Sc=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Weather","forecast","_s","visibleItems","setVisibleItems","length","containerRef","handleResize","current","containerWidth","offsetWidth","itemWidth","itemsToShow","Math","floor","min","window","addEventListener","removeEventListener","className","ref","children","slice","map","hour","index","time","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","temperature","_c","$RefreshReg$"],"sources":["/Users/abbylui/Documents/GitHub/idleUI/src/components/Weather.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Weather.css';\n\nconst Weather = ({ forecast }) => {\n    const [visibleItems, setVisibleItems] = useState(forecast.length);\n    const containerRef = useRef(null);\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (containerRef.current) {\n                const containerWidth = containerRef.current.offsetWidth;\n                const itemWidth = 80; // Assume each item takes approximately 80px width including margins\n                const itemsToShow = Math.floor(containerWidth / itemWidth);\n                setVisibleItems(Math.min(itemsToShow, forecast.length));\n            }\n        };\n\n        handleResize(); // Initial check\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, [forecast.length]);\n\n    return (\n        <div className=\"weather-container\" ref={containerRef}>\n            {forecast.slice(0, visibleItems).map((hour, index) => (\n                <div key={index} className=\"weather-hour\">\n                    <p>{hour.time}</p>\n                    <img src={hour.icon} alt=\"weather icon\" className=\"weather-icon\" />\n                    <p>{hour.temperature}Â°C</p>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Weather;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAACM,QAAQ,CAACI,MAAM,CAAC;EACjE,MAAMC,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACZ,MAAMW,YAAY,GAAGA,CAAA,KAAM;MACvB,IAAID,YAAY,CAACE,OAAO,EAAE;QACtB,MAAMC,cAAc,GAAGH,YAAY,CAACE,OAAO,CAACE,WAAW;QACvD,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAC;QACtB,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,cAAc,GAAGE,SAAS,CAAC;QAC1DP,eAAe,CAACS,IAAI,CAACE,GAAG,CAACH,WAAW,EAAEX,QAAQ,CAACI,MAAM,CAAC,CAAC;MAC3D;IACJ,CAAC;IAEDE,YAAY,CAAC,CAAC,CAAC,CAAC;IAChBS,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEV,YAAY,CAAC;IAE/C,OAAO,MAAM;MACTS,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEX,YAAY,CAAC;IACtD,CAAC;EACL,CAAC,EAAE,CAACN,QAAQ,CAACI,MAAM,CAAC,CAAC;EAErB,oBACIN,OAAA;IAAKoB,SAAS,EAAC,mBAAmB;IAACC,GAAG,EAAEd,YAAa;IAAAe,QAAA,EAChDpB,QAAQ,CAACqB,KAAK,CAAC,CAAC,EAAEnB,YAAY,CAAC,CAACoB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC7C1B,OAAA;MAAiBoB,SAAS,EAAC,cAAc;MAAAE,QAAA,gBACrCtB,OAAA;QAAAsB,QAAA,EAAIG,IAAI,CAACE;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClB/B,OAAA;QAAKgC,GAAG,EAAEP,IAAI,CAACQ,IAAK;QAACC,GAAG,EAAC,cAAc;QAACd,SAAS,EAAC;MAAc;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnE/B,OAAA;QAAAsB,QAAA,GAAIG,IAAI,CAACU,WAAW,EAAC,OAAE;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA,GAHrBL,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIV,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAjCIF,OAAO;AAAAmC,EAAA,GAAPnC,OAAO;AAmCb,eAAeA,OAAO;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}