{"ast":null,"code":"useEffect(() => {\n  const preload = () => {\n    let manager = new THREE.LoadingManager();\n    manager.onLoad = function () {\n      if (typo) {\n        const environment = new Environment(typo, particle);\n      }\n    };\n    let typo = null;\n    const loader = new FontLoader(manager);\n    loader.load('https://res.cloudinary.com/dydre7amr/raw/upload/v1612950355/font_zsd4dr.json', function (font) {\n      typo = font;\n    });\n    const particle = new THREE.TextureLoader(manager).load('https://res.cloudinary.com/dfvtkoboz/image/upload/v1605013866/particle_a64uzf.png');\n  };\n  if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) preload();else document.addEventListener('DOMContentLoaded', preload);\n  class Environment {\n    constructor(font, particle) {\n      this.font = font;\n      this.particle = particle;\n      this.container = document.querySelector('#magic');\n      this.scene = new THREE.Scene();\n      this.createCamera();\n      this.createRenderer();\n      this.setup();\n      this.bindEvents();\n    }\n    bindEvents() {\n      window.addEventListener('resize', this.onWindowResize.bind(this));\n    }\n    setup() {\n      // For debugging: add a simple cube to verify WebGL setup\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0x00ff00\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      this.scene.add(cube); // See if this renders\n\n      // Commenting this out for debugging first\n      // this.createParticles = new CreateParticles(this.scene, this.font, this.particle, this.camera, this.renderer);\n    }\n    render() {\n      this.renderer.render(this.scene, this.camera);\n    }\n    createCamera() {\n      this.camera = new THREE.PerspectiveCamera(65, this.container.clientWidth / this.container.clientHeight, 1, 10000);\n      this.camera.position.set(0, 0, 50); // Moved closer for visibility\n    }\n    createRenderer() {\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n      this.renderer.setPixelRatio(window.devicePixelRatio); // Updated for proper ratio\n      this.container.appendChild(this.renderer.domElement);\n      this.renderer.setAnimationLoop(() => {\n        this.render();\n      });\n    }\n    onWindowResize() {\n      this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    }\n  }\n\n  // Vertex and Fragment shader scripts (ensure these are loaded correctly)\n  const vertexShaderScript = document.createElement('script');\n  vertexShaderScript.type = 'x-shader/x-vertex';\n  vertexShaderScript.id = 'vertexshader';\n  vertexShaderScript.text = `\n      attribute float size;\n      attribute vec3 customColor;\n      varying vec3 vColor;\n      void main() {\n        vColor = customColor;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_PointSize = size * (300.0 / -mvPosition.z);\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n  document.body.appendChild(vertexShaderScript);\n  const fragmentShaderScript = document.createElement('script');\n  fragmentShaderScript.type = 'x-shader/x-fragment';\n  fragmentShaderScript.id = 'fragmentshader';\n  fragmentShaderScript.text = `\n      uniform vec3 color;\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n      void main() {\n        gl_FragColor = vec4(color * vColor, 1.0);\n        gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);\n      }\n    `;\n  document.body.appendChild(fragmentShaderScript);\n}, []);","map":{"version":3,"names":["useEffect","preload","manager","THREE","LoadingManager","onLoad","typo","environment","Environment","particle","loader","FontLoader","load","font","TextureLoader","document","readyState","documentElement","doScroll","addEventListener","constructor","container","querySelector","scene","Scene","createCamera","createRenderer","setup","bindEvents","window","onWindowResize","bind","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","render","renderer","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","WebGLRenderer","setSize","setPixelRatio","devicePixelRatio","appendChild","domElement","setAnimationLoop","aspect","updateProjectionMatrix","vertexShaderScript","createElement","type","id","text","body","fragmentShaderScript"],"sources":["/Users/abbylui/Documents/GitHub/aboutme/Portfolio/src/components/Home.js"],"sourcesContent":["useEffect(() => {\n    const preload = () => {\n        let manager = new THREE.LoadingManager();\n        manager.onLoad = function () {\n            if (typo) {\n                const environment = new Environment(typo, particle);\n            }\n        };\n\n        let typo = null;\n        const loader = new FontLoader(manager);\n        loader.load(\n            'https://res.cloudinary.com/dydre7amr/raw/upload/v1612950355/font_zsd4dr.json',\n            function (font) {\n                typo = font;\n            }\n        );\n        const particle = new THREE.TextureLoader(manager).load(\n            'https://res.cloudinary.com/dfvtkoboz/image/upload/v1605013866/particle_a64uzf.png'\n        );\n    };\n\n    if (\n        document.readyState === 'complete' ||\n        (document.readyState !== 'loading' && !document.documentElement.doScroll)\n    )\n        preload();\n    else document.addEventListener('DOMContentLoaded', preload);\n\n    class Environment {\n        constructor(font, particle) {\n            this.font = font;\n            this.particle = particle;\n            this.container = document.querySelector('#magic');\n            this.scene = new THREE.Scene();\n            this.createCamera();\n            this.createRenderer();\n            this.setup();\n            this.bindEvents();\n        }\n\n        bindEvents() {\n            window.addEventListener('resize', this.onWindowResize.bind(this));\n        }\n\n        setup() {\n            // For debugging: add a simple cube to verify WebGL setup\n            const geometry = new THREE.BoxGeometry(1, 1, 1);\n            const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n            const cube = new THREE.Mesh(geometry, material);\n            this.scene.add(cube); // See if this renders\n\n            // Commenting this out for debugging first\n            // this.createParticles = new CreateParticles(this.scene, this.font, this.particle, this.camera, this.renderer);\n        }\n\n        render() {\n            this.renderer.render(this.scene, this.camera);\n        }\n\n        createCamera() {\n            this.camera = new THREE.PerspectiveCamera(\n                65,\n                this.container.clientWidth / this.container.clientHeight,\n                1,\n                10000\n            );\n            this.camera.position.set(0, 0, 50); // Moved closer for visibility\n        }\n\n        createRenderer() {\n            this.renderer = new THREE.WebGLRenderer();\n            this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n            this.renderer.setPixelRatio(window.devicePixelRatio); // Updated for proper ratio\n            this.container.appendChild(this.renderer.domElement);\n            this.renderer.setAnimationLoop(() => {\n                this.render();\n            });\n        }\n\n        onWindowResize() {\n            this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n        }\n    }\n\n    // Vertex and Fragment shader scripts (ensure these are loaded correctly)\n    const vertexShaderScript = document.createElement('script');\n    vertexShaderScript.type = 'x-shader/x-vertex';\n    vertexShaderScript.id = 'vertexshader';\n    vertexShaderScript.text = `\n      attribute float size;\n      attribute vec3 customColor;\n      varying vec3 vColor;\n      void main() {\n        vColor = customColor;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_PointSize = size * (300.0 / -mvPosition.z);\n        gl_Position = projectionMatrix * mvPosition;\n      }\n    `;\n    document.body.appendChild(vertexShaderScript);\n\n    const fragmentShaderScript = document.createElement('script');\n    fragmentShaderScript.type = 'x-shader/x-fragment';\n    fragmentShaderScript.id = 'fragmentshader';\n    fragmentShaderScript.text = `\n      uniform vec3 color;\n      uniform sampler2D pointTexture;\n      varying vec3 vColor;\n      void main() {\n        gl_FragColor = vec4(color * vColor, 1.0);\n        gl_FragColor = gl_FragColor * texture2D(pointTexture, gl_PointCoord);\n      }\n    `;\n    document.body.appendChild(fragmentShaderScript);\n}, []);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}