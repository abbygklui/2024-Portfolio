{"ast":null,"code":"var _jsxFileName = \"/Users/abbylui/Documents/GitHub/aboutme/Portfolio/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleText = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [mousePos, setMousePos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isMouseNearText, setIsMouseNearText] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Create an offscreen canvas for text rendering\n    const bufferCanvas = document.createElement('canvas');\n    const bufferCtx = bufferCanvas.getContext('2d');\n    bufferCanvas.width = canvas.width;\n    bufferCanvas.height = canvas.height;\n    const particles = [];\n    const numParticles = 5000;\n    const text = \"HCI Explorer of Digital-Physical Experiences\";\n    const fontSize = 50;\n\n    // Step 1: Draw the text on the offscreen buffer canvas\n    bufferCtx.font = `${fontSize}px Arial`;\n    bufferCtx.fillStyle = 'white';\n    bufferCtx.textAlign = 'center';\n    bufferCtx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n    // Step 2: Get pixel data of the text from the buffer canvas\n    const imageData = bufferCtx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    // Calculate text bounding box\n    const textWidth = bufferCtx.measureText(text).width;\n    const textHeight = fontSize;\n    const textX = (canvas.width - textWidth) / 2;\n    const textY = (canvas.height - textHeight) / 2;\n\n    // Step 3: Map particles to the text pixels and initialize them near their target\n    for (let y = 0; y < canvas.height; y += 4) {\n      for (let x = 0; x < canvas.width; x += 4) {\n        const index = (y * canvas.width + x) * 4;\n        if (data[index + 3] > 150) {\n          // Check if the pixel is opaque\n          const randomOffset = 20; // Control how far the particles start from their final position\n\n          particles.push({\n            // Start near the target position with a small random offset\n            x: x + (Math.random() - 0.5) * randomOffset,\n            y: y + (Math.random() - 0.5) * randomOffset,\n            bx: x,\n            // Base x position (where the text is)\n            by: y,\n            // Base y position (where the text is)\n            vx: 0,\n            vy: 0,\n            radius: 1.5,\n            friction: 0.85,\n            // Friction to reduce velocity over time\n            bounciness: 1.5 // Controls the strength of the bounce effect\n          });\n        }\n      }\n    }\n\n    // Mousemove handler to update the mouse position\n    const handleMouseMove = e => {\n      const {\n        clientX,\n        clientY\n      } = e;\n      setMousePos({\n        x: clientX,\n        y: clientY\n      });\n\n      // Check if the mouse is near the text bounding box\n      const distanceToTextCenter = Math.sqrt(Math.pow(clientX - canvas.width / 2, 2) + Math.pow(clientY - canvas.height / 2, 2));\n      const textRadius = Math.max(textWidth, textHeight) / 2 + 100; // Adjust the threshold radius\n      setIsMouseNearText(distanceToTextCenter < textRadius);\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation loop\n    const render = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas\n\n      particles.forEach(particle => {\n        if (isMouseNearText) {\n          const distX = particle.x - mousePos.x;\n          const distY = particle.y - mousePos.y;\n          const distance = Math.sqrt(distX * distX + distY * distY);\n\n          // Only apply repulsion if the particle is close to the mouse\n          const repelRadius = 100; // Define the radius for repulsion effect\n          if (distance < repelRadius) {\n            const forceDirectionX = distX / distance;\n            const forceDirectionY = distY / distance;\n            const force = (repelRadius - distance) / repelRadius; // The closer the particle, the stronger the force\n            const directionX = forceDirectionX * force * 4;\n            const directionY = forceDirectionY * force * 4;\n            particle.vx += directionX;\n            particle.vy += directionY;\n          }\n        }\n\n        // Lerp particles back to their original positions with bounciness\n        const dx = particle.bx - particle.x;\n        const dy = particle.by - particle.y;\n\n        // Apply a stronger pull toward the target and allow overshooting\n        particle.vx += dx * 0.05 * particle.bounciness;\n        particle.vy += dy * 0.05 * particle.bounciness;\n\n        // Update particle position\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        // Apply friction to gradually slow down the particles (damping effect)\n        particle.vx *= particle.friction;\n        particle.vy *= particle.friction;\n\n        // Draw the particle\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2, false);\n        ctx.fillStyle = 'white';\n        ctx.fill();\n        ctx.closePath();\n      });\n      requestAnimationFrame(render); // Repeat the render process\n    };\n    render(); // Start the animation\n\n    return () => {\n      // Cleanup\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [mousePos, isMouseNearText]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticleText, \"/lY72S/25zd2+AjKCWdpuJJUebw=\");\n_c = ParticleText;\nexport default ParticleText;\nvar _c;\n$RefreshReg$(_c, \"ParticleText\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","ParticleText","_s","canvasRef","mousePos","setMousePos","x","y","isMouseNearText","setIsMouseNearText","canvas","current","ctx","getContext","width","window","innerWidth","height","innerHeight","bufferCanvas","document","createElement","bufferCtx","particles","numParticles","text","fontSize","font","fillStyle","textAlign","fillText","imageData","getImageData","data","textWidth","measureText","textHeight","textX","textY","index","randomOffset","push","Math","random","bx","by","vx","vy","radius","friction","bounciness","handleMouseMove","e","clientX","clientY","distanceToTextCenter","sqrt","pow","textRadius","max","addEventListener","render","clearRect","forEach","particle","distX","distY","distance","repelRadius","forceDirectionX","forceDirectionY","force","directionX","directionY","dx","dy","beginPath","arc","PI","fill","closePath","requestAnimationFrame","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abbylui/Documents/GitHub/aboutme/Portfolio/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nconst ParticleText = () => {\n  const canvasRef = useRef(null);\n  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n  const [isMouseNearText, setIsMouseNearText] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Create an offscreen canvas for text rendering\n    const bufferCanvas = document.createElement('canvas');\n    const bufferCtx = bufferCanvas.getContext('2d');\n    bufferCanvas.width = canvas.width;\n    bufferCanvas.height = canvas.height;\n\n    const particles = [];\n    const numParticles = 5000;\n\n    const text = \"HCI Explorer of Digital-Physical Experiences\";\n    const fontSize = 50;\n\n    // Step 1: Draw the text on the offscreen buffer canvas\n    bufferCtx.font = `${fontSize}px Arial`;\n    bufferCtx.fillStyle = 'white';\n    bufferCtx.textAlign = 'center';\n    bufferCtx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n    // Step 2: Get pixel data of the text from the buffer canvas\n    const imageData = bufferCtx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imageData.data;\n\n    // Calculate text bounding box\n    const textWidth = bufferCtx.measureText(text).width;\n    const textHeight = fontSize;\n    const textX = (canvas.width - textWidth) / 2;\n    const textY = (canvas.height - textHeight) / 2;\n\n    // Step 3: Map particles to the text pixels and initialize them near their target\n    for (let y = 0; y < canvas.height; y += 4) {\n      for (let x = 0; x < canvas.width; x += 4) {\n        const index = (y * canvas.width + x) * 4;\n        if (data[index + 3] > 150) { // Check if the pixel is opaque\n          const randomOffset = 20; // Control how far the particles start from their final position\n\n          particles.push({\n            // Start near the target position with a small random offset\n            x: x + (Math.random() - 0.5) * randomOffset,\n            y: y + (Math.random() - 0.5) * randomOffset,\n            bx: x, // Base x position (where the text is)\n            by: y, // Base y position (where the text is)\n            vx: 0,\n            vy: 0,\n            radius: 1.5,\n            friction: 0.85, // Friction to reduce velocity over time\n            bounciness: 1.5, // Controls the strength of the bounce effect\n          });\n        }\n      }\n    }\n\n    // Mousemove handler to update the mouse position\n    const handleMouseMove = (e) => {\n      const { clientX, clientY } = e;\n      setMousePos({ x: clientX, y: clientY });\n\n      // Check if the mouse is near the text bounding box\n      const distanceToTextCenter = Math.sqrt(\n        Math.pow(clientX - canvas.width / 2, 2) +\n        Math.pow(clientY - canvas.height / 2, 2)\n      );\n      const textRadius = Math.max(textWidth, textHeight) / 2 + 100; // Adjust the threshold radius\n      setIsMouseNearText(distanceToTextCenter < textRadius);\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation loop\n    const render = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas\n\n      particles.forEach(particle => {\n        if (isMouseNearText) {\n          const distX = particle.x - mousePos.x;\n          const distY = particle.y - mousePos.y;\n          const distance = Math.sqrt(distX * distX + distY * distY);\n\n          // Only apply repulsion if the particle is close to the mouse\n          const repelRadius = 100; // Define the radius for repulsion effect\n          if (distance < repelRadius) {\n            const forceDirectionX = distX / distance;\n            const forceDirectionY = distY / distance;\n            const force = (repelRadius - distance) / repelRadius; // The closer the particle, the stronger the force\n            const directionX = forceDirectionX * force * 4;\n            const directionY = forceDirectionY * force * 4;\n\n            particle.vx += directionX;\n            particle.vy += directionY;\n          }\n        }\n\n        // Lerp particles back to their original positions with bounciness\n        const dx = particle.bx - particle.x;\n        const dy = particle.by - particle.y;\n\n        // Apply a stronger pull toward the target and allow overshooting\n        particle.vx += dx * 0.05 * particle.bounciness;\n        particle.vy += dy * 0.05 * particle.bounciness;\n\n        // Update particle position\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        // Apply friction to gradually slow down the particles (damping effect)\n        particle.vx *= particle.friction;\n        particle.vy *= particle.friction;\n\n        // Draw the particle\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2, false);\n        ctx.fillStyle = 'white';\n        ctx.fill();\n        ctx.closePath();\n      });\n\n      requestAnimationFrame(render); // Repeat the render process\n    };\n\n    render(); // Start the animation\n\n    return () => {\n      // Cleanup\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [mousePos, isMouseNearText]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default ParticleText;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}