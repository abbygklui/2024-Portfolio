{"ast":null,"code":"var _jsxFileName = \"/Users/abbylui/Documents/GitHub/aboutme/idleUI/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    // Vertex Shader\n    const vertexShader = `\n      uniform vec3 lightPosition;\n      varying float vDist;\n  \n      void main() {\n          vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n  \n          // Calculate the distance from the light source to the vertex\n          float dist = distance(lightPosition, transformedPosition);\n          vDist = dist;\n  \n          // Apply a warp based on distance\n          vec3 direction = normalize(lightPosition - transformedPosition);\n          vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.2; // Warp effect\n          transformedPosition += offset;\n  \n          gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n      }\n    `;\n\n    // Fragment Shader for Text and Rectangle\n    const fragmentShader = `\n      varying float vDist;\n      uniform vec3 lightColor; // Uniform to receive light color\n      uniform vec3 baseColor; // Uniform to set the base color (text or rectangle)\n  \n      void main() {\n          // Calculate intensity based on distance\n          float intensity = 1.0 / (vDist * vDist + 0.1);\n          intensity = intensity * 40.0;\n          intensity = clamp(intensity, 0.0, 1.0);\n  \n          // Apply the light color and intensity to the output color\n          vec3 color = mix(baseColor, lightColor * intensity, 0.5); // Mix base color with light\n  \n          gl_FragColor = vec4(color, 1.0); // Use the calculated color for the fragment\n      }\n    `;\n\n    // Scene, Camera, Renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add a point light to act as the dynamic light source\n    const pointLight = new THREE.PointLight(0xffffff, 2, 100); // White light with increased intensity\n    pointLight.decay = 1; // Adjust decay for desired falloff\n    pointLight.castShadow = true;\n    scene.add(pointLight);\n\n    // Uniforms for the shader\n    const uniforms = {\n      lightPosition: {\n        value: new THREE.Vector3(0, 0, 0)\n      },\n      lightColor: {\n        value: new THREE.Color(0xffffff)\n      } // Set light color for interactions\n    };\n\n    // Load the font and create the text\n    const loader = new FontLoader();\n    loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n      const textGeometry = new TextGeometry('HCI Explorer of digital-physical experiences', {\n        font: font,\n        size: 0.2,\n        height: 0.0,\n        curveSegments: 12,\n        bevelEnabled: false\n      });\n      textGeometry.computeBoundingBox();\n      const textWidth = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n      const textHeight = textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y;\n      const xPosition = -textWidth / 2;\n      const yPosition = 2.5; // Keep the original vertical position of the text\n\n      // Create the group for text and background\n      const textGroup = new THREE.Group();\n\n      // Create the background rectangle\n      const backgroundGeometry = new THREE.PlaneGeometry(textWidth + 0.1,\n      // Slightly larger than the text\n      textHeight + 0.1);\n\n      // Background material using the same shader but with a blue base color\n      const backgroundMaterial = new THREE.ShaderMaterial({\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader,\n        uniforms: {\n          ...uniforms,\n          baseColor: {\n            value: new THREE.Color(0x0000ff)\n          } // Blue base color for the rectangle\n        }\n      });\n      const backgroundMesh = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n      backgroundMesh.position.set(0, -0.1, -0.01); // Adjust the rectangle's position slightly below the text\n\n      // Text material using the same shader but with a white base color\n      const textMaterial = new THREE.ShaderMaterial({\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader,\n        uniforms: {\n          ...uniforms,\n          baseColor: {\n            value: new THREE.Color(0xffffff)\n          } // White base color for the text\n        }\n      });\n      const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      textMesh.position.set(0, 0, 0); // Positioned at origin of the group\n\n      // Add both the text and background to the group\n      textGroup.add(backgroundMesh);\n      textGroup.add(textMesh);\n      textGroup.position.set(xPosition, yPosition, 0); // Adjust the group's overall position\n\n      // Add the group to the scene\n      scene.add(textGroup);\n    });\n\n    // Camera Position\n    camera.position.z = 5;\n\n    // Handle window resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animate light following the mouse\n    let mouseX = 0;\n    let mouseY = 0;\n    const onMouseMove = event => {\n      mouseX = event.clientX / window.innerWidth * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n    document.addEventListener('mousemove', onMouseMove);\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Convert the mouse position to 3D coordinates\n      const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n\n      // Position the light slightly in front of the text\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      pos.z += 1; // Keep the light in front of the text\n      pointLight.position.copy(pos);\n\n      // Update the light position uniform for the shader\n      uniforms.lightPosition.value.copy(pos);\n      renderer.render(scene, camera);\n    }\n    animate();\n    return () => {\n      // Clean up event listeners and Three.js resources on component unmount\n      document.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","FontLoader","TextGeometry","Navbar","jsxDEV","_jsxDEV","App","_s","mountRef","vertexShader","fragmentShader","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","current","appendChild","domElement","pointLight","PointLight","decay","castShadow","add","uniforms","lightPosition","value","Vector3","lightColor","Color","loader","load","font","textGeometry","size","height","curveSegments","bevelEnabled","computeBoundingBox","textWidth","boundingBox","max","x","min","textHeight","y","xPosition","yPosition","textGroup","Group","backgroundGeometry","PlaneGeometry","backgroundMaterial","ShaderMaterial","baseColor","backgroundMesh","Mesh","position","set","textMaterial","textMesh","z","handleResize","width","aspect","updateProjectionMatrix","addEventListener","mouseX","mouseY","onMouseMove","event","clientX","clientY","document","animate","requestAnimationFrame","vector","unproject","dir","sub","normalize","distance","pos","clone","multiplyScalar","copy","render","removeEventListener","removeChild","dispose","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","_c","$RefreshReg$"],"sources":["/Users/abbylui/Documents/GitHub/aboutme/idleUI/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\nimport Navbar from './components/Navbar';\nimport './App.css';\n\nfunction App() {\n  const mountRef = useRef(null);\n\n  useEffect(() => {\n    // Vertex Shader\n    const vertexShader = `\n      uniform vec3 lightPosition;\n      varying float vDist;\n  \n      void main() {\n          vec3 transformedPosition = (modelViewMatrix * vec4(position, 1.0)).xyz;\n  \n          // Calculate the distance from the light source to the vertex\n          float dist = distance(lightPosition, transformedPosition);\n          vDist = dist;\n  \n          // Apply a warp based on distance\n          vec3 direction = normalize(lightPosition - transformedPosition);\n          vec3 offset = direction * (1.0 / (dist + 0.1)) * 1.2; // Warp effect\n          transformedPosition += offset;\n  \n          gl_Position = projectionMatrix * vec4(transformedPosition, 1.0);\n      }\n    `;\n\n    // Fragment Shader for Text and Rectangle\n    const fragmentShader = `\n      varying float vDist;\n      uniform vec3 lightColor; // Uniform to receive light color\n      uniform vec3 baseColor; // Uniform to set the base color (text or rectangle)\n  \n      void main() {\n          // Calculate intensity based on distance\n          float intensity = 1.0 / (vDist * vDist + 0.1);\n          intensity = intensity * 40.0;\n          intensity = clamp(intensity, 0.0, 1.0);\n  \n          // Apply the light color and intensity to the output color\n          vec3 color = mix(baseColor, lightColor * intensity, 0.5); // Mix base color with light\n  \n          gl_FragColor = vec4(color, 1.0); // Use the calculated color for the fragment\n      }\n    `;\n\n    // Scene, Camera, Renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Add a point light to act as the dynamic light source\n    const pointLight = new THREE.PointLight(0xffffff, 2, 100); // White light with increased intensity\n    pointLight.decay = 1; // Adjust decay for desired falloff\n    pointLight.castShadow = true;\n    scene.add(pointLight);\n\n    // Uniforms for the shader\n    const uniforms = {\n      lightPosition: { value: new THREE.Vector3(0, 0, 0) },\n      lightColor: { value: new THREE.Color(0xffffff) }, // Set light color for interactions\n    };\n\n    // Load the font and create the text\n    const loader = new FontLoader();\n    loader.load(\n      'https://threejs.org/examples/fonts/helvetiker_regular.typeface.json',\n      function (font) {\n        const textGeometry = new TextGeometry(\n          'HCI Explorer of digital-physical experiences',\n          {\n            font: font,\n            size: 0.2,\n            height: 0.0,\n            curveSegments: 12,\n            bevelEnabled: false,\n          }\n        );\n\n        textGeometry.computeBoundingBox();\n        const textWidth =\n          textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;\n        const textHeight =\n          textGeometry.boundingBox.max.y - textGeometry.boundingBox.min.y;\n        const xPosition = -textWidth / 2;\n        const yPosition = 2.5; // Keep the original vertical position of the text\n\n        // Create the group for text and background\n        const textGroup = new THREE.Group();\n\n        // Create the background rectangle\n        const backgroundGeometry = new THREE.PlaneGeometry(\n          textWidth + 0.1, // Slightly larger than the text\n          textHeight + 0.1\n        );\n\n        // Background material using the same shader but with a blue base color\n        const backgroundMaterial = new THREE.ShaderMaterial({\n          vertexShader: vertexShader,\n          fragmentShader: fragmentShader,\n          uniforms: {\n            ...uniforms,\n            baseColor: { value: new THREE.Color(0x0000ff) }, // Blue base color for the rectangle\n          },\n        });\n\n        const backgroundMesh = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n        backgroundMesh.position.set(0, -0.1, -0.01); // Adjust the rectangle's position slightly below the text\n\n        // Text material using the same shader but with a white base color\n        const textMaterial = new THREE.ShaderMaterial({\n          vertexShader: vertexShader,\n          fragmentShader: fragmentShader,\n          uniforms: {\n            ...uniforms,\n            baseColor: { value: new THREE.Color(0xffffff) }, // White base color for the text\n          },\n        });\n\n        const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n        textMesh.position.set(0, 0, 0); // Positioned at origin of the group\n\n        // Add both the text and background to the group\n        textGroup.add(backgroundMesh);\n        textGroup.add(textMesh);\n        textGroup.position.set(xPosition, yPosition, 0); // Adjust the group's overall position\n\n        // Add the group to the scene\n        scene.add(textGroup);\n      }\n    );\n\n    // Camera Position\n    camera.position.z = 5;\n\n    // Handle window resize\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animate light following the mouse\n    let mouseX = 0;\n    let mouseY = 0;\n\n    const onMouseMove = (event) => {\n      mouseX = (event.clientX / window.innerWidth) * 2 - 1;\n      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;\n    };\n\n    document.addEventListener('mousemove', onMouseMove);\n\n    function animate() {\n      requestAnimationFrame(animate);\n\n      // Convert the mouse position to 3D coordinates\n      const vector = new THREE.Vector3(mouseX, mouseY, 0.5);\n      vector.unproject(camera);\n      const dir = vector.sub(camera.position).normalize();\n      const distance = -camera.position.z / dir.z;\n\n      // Position the light slightly in front of the text\n      const pos = camera.position.clone().add(dir.multiplyScalar(distance));\n      pos.z += 1; // Keep the light in front of the text\n      pointLight.position.copy(pos);\n\n      // Update the light position uniform for the shader\n      uniforms.lightPosition.value.copy(pos);\n\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n    return () => {\n      // Clean up event listeners and Three.js resources on component unmount\n      document.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('resize', handleResize);\n      mountRef.current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n\n  return (\n    <div>\n      <Navbar />\n      <div ref={mountRef} style={{ width: '100vw', height: '100vh' }} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}